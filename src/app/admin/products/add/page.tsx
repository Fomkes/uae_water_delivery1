'use client';

import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

const categories = [
  'Natural Water',
  'Sparkling Water', 
  'Alkaline Water',
  'Family Packs',
  'Sports Water',
  'Enhanced Water',
  'Distilled Water'
];

export default function AddProductPage() {
  const [product, setProduct] = useState({
    name: '',
    nameAr: '',
    description: '',
    descriptionAr: '',
    category: '',
    price: '',
    originalPrice: '',
    volume: '',
    origin: 'UAE',
    image: '/uploads/products/default-water.jpg',
    inStock: true,
    stockQuantity: '50'
  });
  
  const [isLoading, setIsLoading] = useState(false);
  const supabase = createClientComponentClient();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const { data, error } = await supabase
        .from('products')
        .insert([{
          name: product.name,
          name_ar: product.nameAr || product.name,
          description: product.description,
          description_ar: product.descriptionAr || product.description,
          category: product.category,
          category_ar: product.category,
          price: parseFloat(product.price),
          original_price: product.originalPrice ? parseFloat(product.originalPrice) : null,
          volume: product.volume,
          origin: product.origin,
          origin_ar: 'ÿßŸÑÿ•ŸÖÿßÿ±ÿßÿ™',
          image: product.image,
          images: [product.image],
          in_stock: product.inStock,
          stock_quantity: parseInt(product.stockQuantity),
          rating: 4.5,
          reviews: Math.floor(Math.random() * 100) + 10,
          features: ['High Quality', 'Natural', 'BPA Free'],
          features_ar: ['ÿ¨ŸàÿØÿ© ÿπÿßŸÑŸäÿ©', 'ÿ∑ÿ®ŸäÿπŸä', 'ÿÆÿßŸÑŸä ŸÖŸÜ BPA'],
          size: 'Medium',
          size_ar: 'ŸÖÿ™Ÿàÿ≥ÿ∑',
          volume_ar: product.volume,
          slug: product.name.toLowerCase().replace(/[^a-z0-9]/g, '-'),
          popular: false
        }]);

      if (error) throw error;

      alert('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setProduct({
        name: '',
        nameAr: '',
        description: '',
        descriptionAr: '',
        category: '',
        price: '',
        originalPrice: '',
        volume: '',
        origin: 'UAE',
        image: '/uploads/products/default-water.jpg',
        inStock: true,
        stockQuantity: '50'
      });

    } catch (error) {
      console.error('Error adding product:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <Card>
        <CardHeader>
          <CardTitle>üÜï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
              <div>
                <Label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ (English)</Label>
                <Input
                  id="name"
                  value={product.name}
                  onChange={(e) => setProduct({...product, name: e.target.value})}
                  placeholder="Premium Natural Water"
                  required
                />
              </div>
              
              <div>
                <Label htmlFor="nameAr">–ù–∞–∑–≤–∞–Ω–∏–µ (ÿßŸÑÿπÿ±ÿ®Ÿäÿ©)</Label>
                <Input
                  id="nameAr"
                  value={product.nameAr}
                  onChange={(e) => setProduct({...product, nameAr: e.target.value})}
                  placeholder="ÿßŸÑŸÖŸäÿßŸá ÿßŸÑÿ∑ÿ®ŸäÿπŸäÿ© ÿßŸÑŸÖŸÖŸäÿ≤ÿ©"
                />
              </div>

              {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
              <div>
                <Label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
                <Select value={product.category} onValueChange={(value) => setProduct({...product, category: value})}>
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" />
                  </SelectTrigger>
                  <SelectContent>
                    {categories.map((cat) => (
                      <SelectItem key={cat} value={cat}>{cat}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* –¶–µ–Ω–∞ */}
              <div>
                <Label htmlFor="price">–¶–µ–Ω–∞ (AED)</Label>
                <Input
                  id="price"
                  type="number"
                  step="0.01"
                  value={product.price}
                  onChange={(e) => setProduct({...product, price: e.target.value})}
                  placeholder="25.99"
                  required
                />
              </div>

              {/* –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ */}
              <div>
                <Label htmlFor="originalPrice">–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
                <Input
                  id="originalPrice"
                  type="number"
                  step="0.01"
                  value={product.originalPrice}
                  onChange={(e) => setProduct({...product, originalPrice: e.target.value})}
                  placeholder="35.99"
                />
              </div>

              {/* –û–±—ä–µ–º */}
              <div>
                <Label htmlFor="volume">–û–±—ä–µ–º</Label>
                <Input
                  id="volume"
                  value={product.volume}
                  onChange={(e) => setProduct({...product, volume: e.target.value})}
                  placeholder="500ml"
                />
              </div>

              {/* –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ */}
              <div>
                <Label htmlFor="origin">–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ</Label>
                <Input
                  id="origin"
                  value={product.origin}
                  onChange={(e) => setProduct({...product, origin: e.target.value})}
                  placeholder="UAE"
                />
              </div>

              {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ */}
              <div>
                <Label htmlFor="stockQuantity">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ</Label>
                <Input
                  id="stockQuantity"
                  type="number"
                  value={product.stockQuantity}
                  onChange={(e) => setProduct({...product, stockQuantity: e.target.value})}
                  placeholder="50"
                />
              </div>
            </div>

            {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
            <div>
              <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ (English)</Label>
              <Textarea
                id="description"
                value={product.description}
                onChange={(e) => setProduct({...product, description: e.target.value})}
                placeholder="High quality natural water perfect for daily hydration..."
                rows={3}
              />
            </div>

            <div>
              <Label htmlFor="descriptionAr">–û–ø–∏—Å–∞–Ω–∏–µ (ÿßŸÑÿπÿ±ÿ®Ÿäÿ©)</Label>
              <Textarea
                id="descriptionAr"
                value={product.descriptionAr}
                onChange={(e) => setProduct({...product, descriptionAr: e.target.value})}
                placeholder="ŸÖŸäÿßŸá ÿ∑ÿ®ŸäÿπŸäÿ© ÿπÿßŸÑŸäÿ© ÿßŸÑÿ¨ŸàÿØÿ© ŸÖÿ´ÿßŸÑŸäÿ© ŸÑŸÑÿ™ÿ±ÿ∑Ÿäÿ® ÿßŸÑŸäŸàŸÖŸä..."
                rows={3}
              />
            </div>

            {/* URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
            <div>
              <Label htmlFor="image">URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</Label>
              <Input
                id="image"
                value={product.image}
                onChange={(e) => setProduct({...product, image: e.target.value})}
                placeholder="/uploads/products/water-bottle.jpg"
              />
            </div>

            <Button type="submit" disabled={isLoading} className="w-full">
              {isLoading ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}
