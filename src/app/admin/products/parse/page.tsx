'use client';

import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { categories } from '@/data/products';
import {
  Link as LinkIcon,
  Download,
  CheckCircle,
  AlertCircle,
  Loader2,
  Eye,
  Save,
  RefreshCw,
  Upload,
  ShoppingBag,
  Globe,
  Image as ImageIcon,
  DollarSign,
  Package,
  AlertTriangle,
  Clock,
  Trash2,
  Check,
  X
} from 'lucide-react';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
interface ParseResult {
  success: boolean;
  products?: ParsedProduct[];
  totalFound?: number;
  source?: string;
  timestamp?: string;
  message?: string;
  error?: string;
  details?: string;
  suggestions?: string[];
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
interface ParsedProduct {
  name: string;
  nameAr?: string;
  description: string;
  descriptionAr?: string;
  price: number;
  originalPrice?: number;
  image: string;
  images: string[];
  category: string;
  categoryAr?: string;
  size?: string;
  sizeAr?: string;
  volume?: string;
  volumeAr?: string;
  origin?: string;
  originAr?: string;
  features: string[];
  featuresAr?: string[];
  rating?: number;
  reviews?: number;
  slug: string;
  sourceUrl: string;
  inStock: boolean;
  stockQuantity: number;
}

export default function ProductParsePage() {
  const [url, setUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [parseResult, setParseResult] = useState<ParseResult | null>(null);
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [maxProducts, setMaxProducts] = useState(20);
  const [selectedProducts, setSelectedProducts] = useState<Set<number>>(new Set());
  const [isSavingProducts, setIsSavingProducts] = useState(false);
  const [saveProgress, setSaveProgress] = useState(0);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è)
  const handleParse = async () => {
    if (!url.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ URL
    try {
      new URL(url);
    } catch {
      alert('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://');
      return;
    }

    setIsLoading(true);
    setParseResult(null);
    setSelectedProducts(new Set());

    try {
      console.log(`üöÄ Starting demo parse for: ${url}`);

      // –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      await new Promise(resolve => setTimeout(resolve, 2000));

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-—Ç–æ–≤–∞—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
      const siteType =
        url.includes('carrefour') ? 'Carrefour UAE' :
        url.includes('lulu') ? 'LuLu Hypermarket' :
        url.includes('spinneys') ? 'Spinneys' :
        url.includes('amazon') ? 'Amazon UAE' : 'Generic Store';

      const mockProducts: ParsedProduct[] = Array.from({ length: Math.min(maxProducts, 8) }, (_, i) => ({
        name: `${siteType} Water ${i + 1}`,
        nameAr: `ŸÖÿßÿ° ${siteType} ${i + 1}`,
        description: `Premium quality water product from ${siteType}. Perfect for daily hydration needs with natural minerals.`,
        descriptionAr: `ŸÖŸÜÿ™ÿ¨ ŸÖÿßÿ° ÿπÿßŸÑŸä ÿßŸÑÿ¨ŸàÿØÿ© ŸÖŸÜ ${siteType}. ŸÖÿ´ÿßŸÑŸä ŸÑÿßÿ≠ÿ™Ÿäÿßÿ¨ÿßÿ™ ÿßŸÑÿ™ÿ±ÿ∑Ÿäÿ® ÿßŸÑŸäŸàŸÖŸäÿ© ŸÖÿπ ÿßŸÑŸÖÿπÿßÿØŸÜ ÿßŸÑÿ∑ÿ®ŸäÿπŸäÿ©.`,
        price: 15 + Math.random() * 25,
        originalPrice: Math.random() > 0.7 ? 35 + Math.random() * 15 : undefined,
        image: '/uploads/products/default-water.jpg',
        images: ['/uploads/products/default-water.jpg'],
        category: selectedCategory || 'Natural Water',
        categoryAr: 'ÿßŸÑŸÖŸäÿßŸá ÿßŸÑÿ∑ÿ®ŸäÿπŸäÿ©',
        size: ['Small', 'Medium', 'Large'][Math.floor(Math.random() * 3)],
        sizeAr: ['ÿµÿ∫Ÿäÿ±', 'ŸÖÿ™Ÿàÿ≥ÿ∑', 'ŸÉÿ®Ÿäÿ±'][Math.floor(Math.random() * 3)],
        volume: ['330ml', '500ml', '750ml', '1L', '1.5L'][Math.floor(Math.random() * 5)],
        volumeAr: ['330 ŸÖŸÑ', '500 ŸÖŸÑ', '750 ŸÖŸÑ', '1 ŸÑÿ™ÿ±', '1.5 ŸÑÿ™ÿ±'][Math.floor(Math.random() * 5)],
        origin: 'UAE',
        originAr: 'ÿßŸÑÿ•ŸÖÿßÿ±ÿßÿ™',
        features: ['Natural', 'High Quality', 'BPA Free', 'Refreshing'],
        featuresAr: ['ÿ∑ÿ®ŸäÿπŸä', 'ÿ¨ŸàÿØÿ© ÿπÿßŸÑŸäÿ©', 'ÿÆÿßŸÑŸä ŸÖŸÜ BPA', 'ŸÖŸÜÿπÿ¥'],
        rating: 4.0 + Math.random() * 1.0,
        reviews: Math.floor(Math.random() * 150) + 10,
        slug: `${siteType.toLowerCase()}-water-${i + 1}`.replace(/\s+/g, '-'),
        sourceUrl: url,
        inStock: Math.random() > 0.2,
        stockQuantity: Math.floor(Math.random() * 100) + 10
      }));

      const result: ParseResult = {
        success: true,
        products: mockProducts,
        totalFound: mockProducts.length,
        source: url,
        timestamp: new Date().toISOString(),
        message: `Successfully parsed ${mockProducts.length} products from ${siteType} (Demo Mode)`
      };

      console.log('üì¶ Demo parse result:', result);
      setParseResult(result);

      if (result.success && result.products) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        const allIndices = new Set(result.products.map((_, index) => index));
        setSelectedProducts(allIndices);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
        if (!selectedCategory && result.products.length > 0) {
          const firstProductCategory = result.products[0].category;
          setSelectedCategory(firstProductCategory);
        }
      }

    } catch (error) {
      console.error('‚ùå Parse error:', error);
      setParseResult({
        success: false,
        error: '–û—à–∏–±–∫–∞ –¥–µ–º–æ-–ø–∞—Ä—Å–∏–Ω–≥–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        suggestions: [
          '–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞',
          '–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É',
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π URL',
          '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏'
        ]
      });
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–¥–µ–º–æ-–≤–µ—Ä—Å–∏—è)
  const handleSaveSelectedProducts = async () => {
    if (!parseResult?.products || selectedProducts.size === 0) {
      alert('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }

    if (!selectedCategory) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤');
      return;
    }

    const selectedProductsList = Array.from(selectedProducts).map(index =>
      parseResult.products![index]
    );

    if (!confirm(`üöÄ –î–ï–ú–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å ${selectedProductsList.length} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${selectedCategory}"?\n\n–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è. –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.`)) {
      return;
    }

    setIsSavingProducts(true);
    setSaveProgress(0);

    try {
      // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
      for (let i = 0; i < selectedProductsList.length; i++) {
        const product = selectedProductsList[i];

        // –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
        await new Promise(resolve => setTimeout(resolve, 300));

        console.log(`‚úÖ [DEMO] Saved product: ${product.name}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        const progress = ((i + 1) / selectedProductsList.length) * 100;
        setSaveProgress(progress);
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const message = `‚úÖ –î–ï–ú–û: –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${selectedProductsList.length} —Ç–æ–≤–∞—Ä–æ–≤
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${selectedCategory}
–ò—Å—Ç–æ—á–Ω–∏–∫: ${parseResult.source}

üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:
${selectedProductsList.slice(0, 5).map((p, i) => `${i + 1}. ${p.name} - AED ${p.price.toFixed(2)}`).join('\n')}
${selectedProductsList.length > 5 ? `... –∏ –µ—â–µ ${selectedProductsList.length - 5} —Ç–æ–≤–∞—Ä–æ–≤` : ''}

üí° –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è. –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Supabase.`;

      alert(message);

      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setParseResult(null);
      setUrl('');
      setSelectedProducts(new Set());
      setSelectedCategory('');

    } catch (error) {
      console.error('‚ùå Demo save error:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤');
    } finally {
      setIsSavingProducts(false);
      setSaveProgress(0);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
  const toggleProductSelection = (index: number) => {
    const newSelection = new Set(selectedProducts);
    if (newSelection.has(index)) {
      newSelection.delete(index);
    } else {
      newSelection.add(index);
    }
    setSelectedProducts(newSelection);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const toggleSelectAll = () => {
    if (!parseResult?.products) return;

    if (selectedProducts.size === parseResult.products.length) {
      setSelectedProducts(new Set());
    } else {
      const allIndices = new Set(parseResult.products.map((_, index) => index));
      setSelectedProducts(allIndices);
    }
  };

  const supportedSites = [
    { name: 'Carrefour UAE', url: 'carrefouruae.com', status: 'active' },
    { name: 'LuLu Hypermarket', url: 'luluhypermarket.com', status: 'active' },
    { name: 'Spinneys UAE', url: 'spinneys.com', status: 'active' },
    { name: 'Amazon UAE', url: 'amazon.ae', status: 'experimental' },
    { name: 'Noon UAE', url: 'noon.com', status: 'planned' },
    { name: 'Union Coop', url: 'unioncoop.ae', status: 'planned' }
  ];

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-3xl font-bold text-gray-900">üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤</h1>
        <p className="text-gray-600">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –û–ê–≠</p>
      </div>

      {/* –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∞–π—Ç—ã */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Globe className="h-5 w-5" />
            –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∞–π—Ç—ã
          </CardTitle>
          <CardDescription>
            –ü–∞—Ä—Å–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–∞–π—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {supportedSites.map((site) => (
              <div key={site.name} className="flex items-center justify-between p-3 border rounded-lg">
                <div>
                  <div className="font-medium">{site.name}</div>
                  <div className="text-sm text-gray-500">{site.url}</div>
                </div>
                <Badge variant={
                  site.status === 'active' ? 'default' :
                  site.status === 'experimental' ? 'secondary' : 'outline'
                }>
                  {site.status === 'active' ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' :
                   site.status === 'experimental' ? 'üß™ –¢–µ—Å—Ç' : 'üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è'}
                </Badge>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* –§–æ—Ä–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <LinkIcon className="h-5 w-5" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* URL –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
            <div className="lg:col-span-2">
              <Label htmlFor="url">URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏</Label>
              <Input
                id="url"
                placeholder="https://www.carrefouruae.com/mafuae/en/category/water-beverages..."
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                className="mt-1"
              />
            </div>
            <div>
              <Label htmlFor="maxProducts">–ú–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤</Label>
              <Select value={maxProducts.toString()} onValueChange={(value) => setMaxProducts(parseInt(value))}>
                <SelectTrigger className="mt-1">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="10">10 —Ç–æ–≤–∞—Ä–æ–≤</SelectItem>
                  <SelectItem value="20">20 —Ç–æ–≤–∞—Ä–æ–≤</SelectItem>
                  <SelectItem value="50">50 —Ç–æ–≤–∞—Ä–æ–≤</SelectItem>
                  <SelectItem value="100">100 —Ç–æ–≤–∞—Ä–æ–≤</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
          <div>
            <Label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
            <Select value={selectedCategory} onValueChange={setSelectedCategory}>
              <SelectTrigger className="mt-1">
                <SelectValue placeholder="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</SelectItem>
                {categories.map((category) => (
                  <SelectItem key={category.id} value={category.name}>
                    {category.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ */}
          <Button
            onClick={handleParse}
            disabled={isLoading || !url.trim()}
            className="w-full"
            size="lg"
          >
            {isLoading ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                –ü–∞—Ä—Å–∏–Ω–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...
              </>
            ) : (
              <>
                <Download className="h-4 w-4 mr-2" />
                üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ */}
      {parseResult && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              {parseResult.success ? (
                <CheckCircle className="h-5 w-5 text-green-600" />
              ) : (
                <AlertCircle className="h-5 w-5 text-red-600" />
              )}
              –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
            </CardTitle>
          </CardHeader>
          <CardContent>
            {!parseResult.success ? (
              <div className="space-y-4">
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>
                    <strong>–û—à–∏–±–∫–∞:</strong> {parseResult.error}
                    {parseResult.details && (
                      <div className="mt-2 text-sm">{parseResult.details}</div>
                    )}
                  </AlertDescription>
                </Alert>

                {parseResult.suggestions && parseResult.suggestions.length > 0 && (
                  <Alert>
                    <AlertTriangle className="h-4 w-4" />
                    <AlertDescription>
                      <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong>
                      <ul className="list-disc list-inside mt-2 space-y-1">
                        {parseResult.suggestions.map((suggestion, index) => (
                          <li key={index} className="text-sm">{suggestion}</li>
                        ))}
                      </ul>
                    </AlertDescription>
                  </Alert>
                )}
              </div>
            ) : (
              <div className="space-y-4">
                <Alert>
                  <CheckCircle className="h-4 w-4" />
                  <AlertDescription>
                    <strong>–£—Å–ø–µ—à–Ω–æ!</strong> –ù–∞–π–¥–µ–Ω–æ {parseResult.totalFound} —Ç–æ–≤–∞—Ä–æ–≤.
                    {parseResult.source && ` –ò—Å—Ç–æ—á–Ω–∏–∫: ${parseResult.source}`}
                  </AlertDescription>
                </Alert>

                {parseResult.products && parseResult.products.length > 0 && (
                  <>
                    {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º */}
                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div className="flex items-center gap-4">
                        <Checkbox
                          checked={selectedProducts.size === parseResult.products.length}
                          onCheckedChange={toggleSelectAll}
                        />
                        <span className="font-medium">
                          –í—ã–±—Ä–∞–Ω–æ {selectedProducts.size} –∏–∑ {parseResult.products.length} —Ç–æ–≤–∞—Ä–æ–≤
                        </span>
                      </div>

                      {selectedProducts.size > 0 && (
                        <Button
                          onClick={handleSaveSelectedProducts}
                          disabled={isSavingProducts || !selectedCategory}
                          className="bg-green-600 hover:bg-green-700"
                        >
                          {isSavingProducts ? (
                            <>
                              <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                              –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                            </>
                          ) : (
                            <>
                              <Save className="h-4 w-4 mr-2" />
                              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ({selectedProducts.size})
                            </>
                          )}
                        </Button>
                      )}
                    </div>

                    {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
                    {isSavingProducts && (
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...</span>
                          <span>{Math.round(saveProgress)}%</span>
                        </div>
                        <Progress value={saveProgress} className="w-full" />
                      </div>
                    )}

                    {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {parseResult.products.map((product, index) => (
                        <div
                          key={index}
                          className={`border rounded-lg p-4 space-y-3 ${
                            selectedProducts.has(index)
                              ? 'border-blue-500 bg-blue-50'
                              : 'border-gray-200'
                          }`}
                        >
                          {/* –ß–µ–∫–±–æ–∫—Å –≤—ã–±–æ—Ä–∞ */}
                          <div className="flex items-center justify-between">
                            <Checkbox
                              checked={selectedProducts.has(index)}
                              onCheckedChange={() => toggleProductSelection(index)}
                            />
                            <Badge variant="outline">{product.category}</Badge>
                          </div>

                          {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
                          <div className="relative aspect-square bg-gray-100 rounded-lg overflow-hidden">
                            <img
                              src={product.image}
                              alt={product.name}
                              className="w-full h-full object-cover"
                              onError={(e) => {
                                e.currentTarget.src = '/uploads/products/default-water.jpg';
                              }}
                            />
                          </div>

                          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
                          <div>
                            <h3 className="font-semibold text-sm line-clamp-2">{product.name}</h3>
                            <p className="text-xs text-gray-600 line-clamp-2 mt-1">{product.description}</p>

                            <div className="flex items-center justify-between mt-2">
                              <div className="text-lg font-bold text-green-600">
                                AED {product.price.toFixed(2)}
                              </div>
                              {product.originalPrice && (
                                <div className="text-sm text-gray-500 line-through">
                                  AED {product.originalPrice.toFixed(2)}
                                </div>
                              )}
                            </div>

                            {/* –î–µ—Ç–∞–ª–∏ */}
                            <div className="flex flex-wrap gap-1 mt-2">
                              {product.volume && (
                                <Badge variant="secondary" className="text-xs">{product.volume}</Badge>
                              )}
                              {product.origin && (
                                <Badge variant="secondary" className="text-xs">{product.origin}</Badge>
                              )}
                              <Badge variant={product.inStock ? 'default' : 'destructive'} className="text-xs">
                                {product.inStock ? '–í –Ω–∞–ª–∏—á–∏–∏' : '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}
                              </Badge>
                            </div>

                            {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
                            {product.features.length > 0 && (
                              <div className="mt-2">
                                <div className="text-xs text-gray-600">–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</div>
                                <div className="flex flex-wrap gap-1 mt-1">
                                  {product.features.slice(0, 3).map((feature, featureIndex) => (
                                    <Badge key={featureIndex} variant="outline" className="text-xs">
                                      {feature}
                                    </Badge>
                                  ))}
                                  {product.features.length > 3 && (
                                    <Badge variant="outline" className="text-xs">
                                      +{product.features.length - 3}
                                    </Badge>
                                  )}
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </>
                )}
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å–æ–≤–µ—Ç—ã */}
      {!parseResult && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Package className="h-5 w-5" />
              –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <h4 className="font-medium flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-green-600" />
                  –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
                </h4>
                <ul className="text-sm text-gray-600 space-y-1 list-disc list-inside">
                  <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤</li>
                  <li>–ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ (10-20)</li>
                  <li>–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º</li>
                  <li>–£–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</li>
                </ul>
              </div>
              <div className="space-y-2">
                <h4 className="font-medium flex items-center gap-2">
                  <AlertCircle className="h-4 w-4 text-orange-600" />
                  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                </h4>
                <ul className="text-sm text-gray-600 space-y-1 list-disc list-inside">
                  <li>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∞–π—Ç—ã –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã</li>
                  <li>–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞</li>
                  <li>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏</li>
                  <li>–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
