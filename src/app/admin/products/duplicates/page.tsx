'use client';

import { useState } from 'react';
import Image from 'next/image';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Separator } from '@/components/ui/separator';
import {
  Search,
  AlertTriangle,
  Trash2,
  RefreshCw,
  CheckCircle,
  Clock,
  Package,
  Users,
  TrendingUp,
  Settings,
  Loader2,
  Eye,
  X,
  Merge
} from 'lucide-react';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface Product {
  id: string;
  name: string;
  name_ar: string;
  slug: string;
  price: number;
  category: string;
  image: string;
  created_at: string;
}

interface DuplicateGroup {
  id: string;
  products: Product[];
  similarityScore: number;
  reason: string;
}

interface DuplicateResult {
  duplicates: DuplicateGroup[];
  totalChecked: number;
  duplicateGroups: number;
  totalDuplicates: number;
  method: string;
  threshold: number;
  message: string;
}

export default function ProductDuplicatesPage() {
  const [duplicateResult, setDuplicateResult] = useState<DuplicateResult | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedMethod, setSelectedMethod] = useState('name');
  const [threshold, setThreshold] = useState(80);
  const [selectedProducts, setSelectedProducts] = useState<Set<string>>(new Set());
  const [isDeleting, setIsDeleting] = useState(false);

  // –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const handleSearchDuplicates = async () => {
    setIsLoading(true);
    setDuplicateResult(null);
    setSelectedProducts(new Set());

    try {
      console.log(`üîç Searching for duplicates using method: ${selectedMethod}, threshold: ${threshold}%`);

      const response = await fetch(`/api/products/duplicates?method=${selectedMethod}&threshold=${threshold}`);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result: DuplicateResult = await response.json();
      console.log('üìä Duplicate results:', result);

      setDuplicateResult(result);

    } catch (error) {
      console.error('‚ùå Error searching duplicates:', error);
      alert(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setIsLoading(false);
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
  const toggleProductSelection = (productId: string) => {
    const newSelection = new Set(selectedProducts);
    if (newSelection.has(productId)) {
      newSelection.delete(productId);
    } else {
      newSelection.add(productId);
    }
    setSelectedProducts(newSelection);
  };

  // –í—ã–±–æ—Ä –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ)
  const selectDuplicatesInGroup = (group: DuplicateGroup) => {
    const newSelection = new Set(selectedProducts);
    // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π), –≤—ã–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    group.products.slice(1).forEach(product => {
      newSelection.add(product.id);
    });
    setSelectedProducts(newSelection);
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const handleDeleteSelected = async () => {
    if (selectedProducts.size === 0) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }

    if (!confirm(`–£–¥–∞–ª–∏—Ç—å ${selectedProducts.size} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
      return;
    }

    setIsDeleting(true);

    try {
      const response = await fetch('/api/products/duplicates', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'delete',
          productIds: Array.from(selectedProducts)
        }),
      });

      if (response.ok) {
        const result = await response.json();
        alert(`‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —Ç–æ–≤–∞—Ä–æ–≤`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        setSelectedProducts(new Set());
        await handleSearchDuplicates();
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
      }

    } catch (error) {
      console.error('‚ùå Error deleting duplicates:', error);
      alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setIsDeleting(false);
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const autoSelectDuplicates = () => {
    if (!duplicateResult) return;

    const newSelection = new Set<string>();
    duplicateResult.duplicates.forEach(group => {
      // –í –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π), –≤—ã–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
      group.products.slice(1).forEach(product => {
        newSelection.add(product.id);
      });
    });
    setSelectedProducts(newSelection);
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-3xl font-bold text-gray-900">üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏</h1>
        <p className="text-gray-600">–ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ</p>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
          </CardTitle>
          <CardDescription>
            –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ */}
            <div>
              <label className="text-sm font-medium mb-2 block">–ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞</label>
              <Select value={selectedMethod} onValueChange={setSelectedMethod}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞</SelectItem>
                  <SelectItem value="slug">–ü–æ URL slug</SelectItem>
                  <SelectItem value="price_name">–ü–æ —Ü–µ–Ω–µ + –Ω–∞–∑–≤–∞–Ω–∏—é</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ */}
            <div>
              <label className="text-sm font-medium mb-2 block">–ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ (%)</label>
              <Select value={threshold.toString()} onValueChange={(value) => setThreshold(parseInt(value))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="60">60% - –ù–∏–∑–∫–∏–π</SelectItem>
                  <SelectItem value="70">70% - –°—Ä–µ–¥–Ω–∏–π</SelectItem>
                  <SelectItem value="80">80% - –í—ã—Å–æ–∫–∏–π</SelectItem>
                  <SelectItem value="90">90% - –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π</SelectItem>
                  <SelectItem value="95">95% - –¢–æ—á–Ω—ã–π</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ */}
            <div className="flex items-end">
              <Button
                onClick={handleSearchDuplicates}
                disabled={isLoading}
                className="w-full"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    –ü–æ–∏—Å–∫...
                  </>
                ) : (
                  <>
                    <Search className="h-4 w-4 mr-2" />
                    –ù–∞–π—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
                  </>
                )}
              </Button>
            </div>
          </div>

          {/* –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4 text-sm text-gray-600">
            <div className="p-3 bg-gray-50 rounded-lg">
              <strong>–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é:</strong> –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –∞—Ä–∞–±—Å–∫–æ–º —è–∑—ã–∫–∞—Ö
            </div>
            <div className="p-3 bg-gray-50 rounded-lg">
              <strong>–ü–æ URL slug:</strong> –ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ URL-–∞–¥—Ä–µ—Å–∞–º–∏
            </div>
            <div className="p-3 bg-gray-50 rounded-lg">
              <strong>–ü–æ —Ü–µ–Ω–µ + –Ω–∞–∑–≤–∞–Ω–∏—é:</strong> –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
      {duplicateResult && (
        <>
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center">
                  <Package className="h-8 w-8 text-blue-600 mr-3" />
                  <div>
                    <p className="text-2xl font-bold">{duplicateResult.totalChecked}</p>
                    <p className="text-sm text-gray-600">–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6">
                <div className="flex items-center">
                  <Users className="h-8 w-8 text-orange-600 mr-3" />
                  <div>
                    <p className="text-2xl font-bold">{duplicateResult.duplicateGroups}</p>
                    <p className="text-sm text-gray-600">–ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6">
                <div className="flex items-center">
                  <AlertTriangle className="h-8 w-8 text-red-600 mr-3" />
                  <div>
                    <p className="text-2xl font-bold">{duplicateResult.totalDuplicates}</p>
                    <p className="text-sm text-gray-600">–í—Å–µ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6">
                <div className="flex items-center">
                  <TrendingUp className="h-8 w-8 text-green-600 mr-3" />
                  <div>
                    <p className="text-2xl font-bold">{Math.round((duplicateResult.totalDuplicates / duplicateResult.totalChecked) * 100)}%</p>
                    <p className="text-sm text-gray-600">–ü—Ä–æ—Ü–µ–Ω—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º */}
          {duplicateResult.duplicates.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <CheckCircle className="h-5 w-5" />
                  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap items-center gap-4">
                  <Button
                    onClick={autoSelectDuplicates}
                    variant="outline"
                    size="sm"
                  >
                    <Eye className="h-4 w-4 mr-2" />
                    –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã ({duplicateResult.totalDuplicates - duplicateResult.duplicateGroups})
                  </Button>

                  <Button
                    onClick={() => setSelectedProducts(new Set())}
                    variant="outline"
                    size="sm"
                  >
                    <X className="h-4 w-4 mr-2" />
                    –°–Ω—è—Ç—å –≤—ã–±–æ—Ä
                  </Button>

                  <Separator orientation="vertical" className="h-6" />

                  <div className="flex items-center gap-2">
                    <span className="text-sm text-gray-600">
                      –í—ã–±—Ä–∞–Ω–æ: <strong>{selectedProducts.size}</strong> —Ç–æ–≤–∞—Ä–æ–≤
                    </span>
                  </div>

                  {selectedProducts.size > 0 && (
                    <Button
                      onClick={handleDeleteSelected}
                      disabled={isDeleting}
                      variant="destructive"
                      size="sm"
                    >
                      {isDeleting ? (
                        <>
                          <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                          –£–¥–∞–ª–µ–Ω–∏–µ...
                        </>
                      ) : (
                        <>
                          <Trash2 className="h-4 w-4 mr-2" />
                          –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ({selectedProducts.size})
                        </>
                      )}
                    </Button>
                  )}
                </div>
              </CardContent>
            </Card>
          )}

          {/* –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ */}
          {duplicateResult.duplicates.length === 0 ? (
            <Card>
              <CardContent className="p-8 text-center">
                <CheckCircle className="h-16 w-16 text-green-600 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-gray-900 mb-2">–î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!</h3>
                <p className="text-gray-600">
                  –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {duplicateResult.totalChecked} —Ç–æ–≤–∞—Ä–æ–≤. –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.
                </p>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-6">
              {duplicateResult.duplicates.map((group, groupIndex) => (
                <Card key={group.id} className="border border-orange-200">
                  <CardHeader className="bg-orange-50">
                    <div className="flex items-center justify-between">
                      <CardTitle className="flex items-center gap-2">
                        <AlertTriangle className="h-5 w-5 text-orange-600" />
                        –ì—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ #{groupIndex + 1}
                      </CardTitle>
                      <div className="flex items-center gap-2">
                        <Badge variant="outline">
                          –°—Ö–æ–∂–µ—Å—Ç—å: {Math.round(group.similarityScore)}%
                        </Badge>
                        <Button
                          onClick={() => selectDuplicatesInGroup(group)}
                          variant="outline"
                          size="sm"
                        >
                          –í—ã–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
                        </Button>
                      </div>
                    </div>
                    <CardDescription>{group.reason}</CardDescription>
                  </CardHeader>
                  <CardContent className="p-0">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-0">
                      {group.products.map((product, productIndex) => (
                        <div
                          key={product.id}
                          className={`p-6 border-r border-b last:border-r-0 ${
                            productIndex === 0
                              ? 'bg-green-50 border-l-4 border-l-green-500'
                              : selectedProducts.has(product.id)
                              ? 'bg-red-50 border-l-4 border-l-red-500'
                              : 'hover:bg-gray-50'
                          }`}
                        >
                          {/* –ß–µ–∫–±–æ–∫—Å –∏ —Å—Ç–∞—Ç—É—Å */}
                          <div className="flex items-center justify-between mb-3">
                            {productIndex === 0 ? (
                              <Badge className="bg-green-600 text-white">
                                <CheckCircle className="h-3 w-3 mr-1" />
                                –û—Ä–∏–≥–∏–Ω–∞–ª
                              </Badge>
                            ) : (
                              <div className="flex items-center gap-2">
                                <Checkbox
                                  checked={selectedProducts.has(product.id)}
                                  onCheckedChange={() => toggleProductSelection(product.id)}
                                />
                                <Badge variant="destructive">
                                  –î—É–±–ª–∏–∫–∞—Ç
                                </Badge>
                              </div>
                            )}
                            <span className="text-xs text-gray-500">
                              {new Date(product.created_at).toLocaleDateString()}
                            </span>
                          </div>

                          {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ */}
                          <div className="relative aspect-square bg-gray-100 rounded-lg overflow-hidden mb-3">
                            <Image
                              src={product.image}
                              alt={product.name}
                              fill
                              className="object-cover"
                              onError={(e) => {
                                e.currentTarget.src = '/uploads/products/default-water.jpg';
                              }}
                            />
                          </div>

                          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
                          <div className="space-y-2">
                            <h4 className="font-semibold text-sm line-clamp-2">{product.name}</h4>
                            {product.name_ar && (
                              <p className="text-xs text-gray-600 line-clamp-1" dir="rtl">
                                {product.name_ar}
                              </p>
                            )}

                            <div className="flex items-center justify-between">
                              <span className="text-lg font-bold text-green-600">
                                AED {product.price.toFixed(2)}
                              </span>
                              <Badge variant="secondary" className="text-xs">
                                {product.category}
                              </Badge>
                            </div>

                            <div className="text-xs text-gray-500">
                              ID: {product.id.slice(0, 8)}...
                            </div>
                            <div className="text-xs text-gray-500">
                              Slug: {product.slug}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </>
      )}

      {/* –°–ø—Ä–∞–≤–∫–∞ */}
      {!duplicateResult && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <AlertTriangle className="h-5 w-5" />
              –û –ø–æ–∏—Å–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-medium mb-2">–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</h4>
                <ul className="text-sm text-gray-600 space-y-1 list-disc list-inside">
                  <li>–°–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É</li>
                  <li>–í—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏</li>
                  <li>–¢–æ–≤–∞—Ä—ã –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –ø–æ —É—Ä–æ–≤–Ω—é —Å—Ö–æ–∂–µ—Å—Ç–∏</li>
                  <li>–°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–æ–≤–∞—Ä –≤ –≥—Ä—É–ø–ø–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º</li>
                </ul>
              </div>
              <div>
                <h4 className="font-medium mb-2">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4>
                <ul className="text-sm text-gray-600 space-y-1 list-disc list-inside">
                  <li>–ù–∞—á–Ω–∏—Ç–µ —Å –≤—ã—Å–æ–∫–æ–≥–æ –ø–æ—Ä–æ–≥–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ (80-90%)</li>
                  <li>–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º</li>
                  <li>–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
                  <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
